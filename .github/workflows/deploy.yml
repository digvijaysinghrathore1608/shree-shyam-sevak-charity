name: Deploy shree shyam sevak

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      confirm_assets_update:
        description: 'Choose YES to run update assets'
        required: true
        default: 'NO'  
        type: choice
        options:
          - "NO"  
          - "YES"      

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Install Serverless v3
        run: npm install -g serverless@3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda
        run: serverless deploy --stage=${{ secrets.ENVIRONMENT }}


      - name: Fetch SSM Parameters
        run: |
          DB_CONNECTION=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_CONNECTION" --with-decryption --query "Parameter.Value" --output text)
          DB_HOST=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_HOST" --with-decryption --query "Parameter.Value" --output text)
          DB_PORT=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_PORT" --with-decryption --query "Parameter.Value" --output text)
          DB_DATABASE=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_DATABASE" --with-decryption --query "Parameter.Value" --output text)
          DB_USERNAME=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_USERNAME" --with-decryption --query "Parameter.Value" --output text)
          DB_PASSWORD=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text)
          APP_KEY=$(aws ssm get-parameter --name "/${{ secrets.SSM_PRIFIX }}/${{ secrets.ENVIRONMENT }}/APP_KEY" --with-decryption --query "Parameter.Value" --output text)

          # Mask secrets in GitHub Actions logs
          echo "::add-mask::$DB_PASSWORD"
          echo "::add-mask::$DB_USERNAME"
          echo "::add-mask::$DB_DATABASE"
          echo "::add-mask::$DB_HOST"
          echo "::add-mask::$APP_KEY"

          # Export to environment
          echo "DB_CONNECTION=$DB_CONNECTION" >> $GITHUB_ENV
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_DATABASE=$DB_DATABASE" >> $GITHUB_ENV
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "APP_KEY=$APP_KEY" >> $GITHUB_ENV
          echo "APP_ENV=${{ secrets.ENVIRONMENT }}" >> $GITHUB_ENV  

      - name: Run Migrations
        run: php artisan migrate --force


      - name: Upload Assets to S3
        if: ${{ github.event.inputs.confirm_assets_update == 'YES' }}
        run: |
          AWS_BUCKET=${{ secrets.AWS_S3_BUCKET }}
          # sync files
          aws s3 sync public/assets s3://$AWS_BUCKET/assets/ --delete
          aws s3 sync public/fonts s3://$AWS_BUCKET/fonts/ --delete
          aws s3 sync public/webfonts s3://$AWS_BUCKET/webfonts/ --delete
          aws s3 sync public/js s3://$AWS_BUCKET/js/ --delete
          aws s3 sync public/img s3://$AWS_BUCKET/img/ --delete
          aws s3 sync public/images s3://$AWS_BUCKET/images/ --delete
          aws s3 sync public/front_landing s3://$AWS_BUCKET/front_landing/ --delete
          aws s3 sync public/css s3://$AWS_BUCKET/css/ --delete
          aws s3 cp public/favicon.ico s3://$AWS_BUCKET/favicon.ico
          aws s3 cp public/mix-manifest.json s3://$AWS_BUCKET/mix-manifest.json
          
          # Optional: Invalidate CloudFront cache
          CLOUDFRONT_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='$AWS_BUCKET.s3.ap-south-1.amazonaws.com'].Id | [0]" --output text)
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"  